version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      ID:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.ID >>

jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "frontend/package-lock.json" }}
      - slack/notify:
          event: fail
          mentions: "@here"
          template: basic_fail_1

  build-backend:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - run:
          name: Install typescript globally
          command: sudo npm install -g typescript
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "backend/package-lock.json" }}
      - slack/notify:
          event: fail
          mentions: "@here"
          template: basic_fail_1

  test-frontend:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      - run:
          name: audit fix
          command: |
            cd frontend
            npm install
            npm audit fix --force
      - run:
          name: run audit
          command: |
            cd frontend
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: "@here"
          template: basic_fail_1

  scan-backend:
    docker:
      - image: cimg/node:16.13.2
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - run:
          name: audit fix
          command: |
            cd backend
            npm install
            npm audit fix --force
      - run:
          name: run audit
          command: |
            cd backend
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: "@here"
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          ID: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend:
          context: udapeople
      - build-backend:
          context: udapeople
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          context: udapeople
          requires: [build-backend]
      - scan-frontend:
          context: udapeople
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
